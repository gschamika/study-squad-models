{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOaRZl+gwxQ2+07k6QVJn3a"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"id":"PDNrU1fxS6kN","executionInfo":{"status":"ok","timestamp":1745395090923,"user_tz":-330,"elapsed":11132,"user":{"displayName":"Sumudu Chamika","userId":"08833356159202459094"}},"outputId":"bbad2903-d213-4d55-b1af-1dba7d4f2c06"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n","WARNING:absl:Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-05cddcf8-4f68-4a3c-b2c6-4bd30da997c6\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-05cddcf8-4f68-4a3c-b2c6-4bd30da997c6\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving 24xccd.jpg to 24xccd.jpg\n","Uploaded file: 24xccd.jpg\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 311ms/step\n","Predicted Character: ළෑ\n"]}],"source":["from google.colab import drive\n","from google.colab import files\n","import tensorflow as tf\n","from tensorflow.keras.models import load_model\n","from tensorflow.keras.preprocessing import image\n","import numpy as np\n","\n","# Step 1: Mount Google Drive and Load the Model\n","drive.mount('/content/drive')\n","\n","# Path to the saved model in Google Drive\n","model_path = '/content/drive/My Drive/Research/Models/sinhala_character_model_v4.h5'\n","\n","# Load the saved model\n","model = load_model(model_path)\n","\n","# Step 2: Sinhala Unicode Mapping\n","sinhala_unicode_mapping = {\n","    1: \"අ\", 2: \"ආ\", 3: \"ඇ\", 4: \"ඈ\", 5: \"ඉ\", 6: \"ඊ\", 7: \"උ\", 8: \"එ\", 9: \"ඒ\", 10: \"ඔ\",\n","    11: \"ඕ\", 12: \"ක\", 13: \"කා\", 14: \"කැ\", 15: \"කෑ\", 16: \"කි\", 17: \"කී\", 18: \"කු\", 19: \"කූ\", 20: \"ක්\",\n","    21: \"කෝ\", 22: \"ක්‍ර\", 23: \"ක්‍රි\", 24: \"ක්‍රී\", 25: \"ග\", 26: \"ගා\", 27: \"ගැ\", 28: \"ගෑ\", 29: \"ගි\", 30: \"ගී\",\n","    31: \"ගු\", 32: \"ගූ\", 33: \"ග්\", 34: \"ගෝ\", 35: \"ග්‍ර\", 36: \"ග්‍රි\", 37: \"ග්‍රී\", 38: \"ච\", 39: \"චා\", 40: \"චැ\",\n","    41: \"චෑ\", 42: \"චි\", 43: \"චී\", 44: \"චු\", 45: \"චූ\", 46: \"ච්\", 47: \"චෝ\", 48: \"ච්‍ර\", 49: \"ච්‍ර්\", 50: \"ච්‍රී\",\n","    51: \"ජ\", 52: \"ජා\", 53: \"ජැ\", 54: \"ජෑ\", 55: \"ජි\", 56: \"ජී\", 57: \"ජු\", 58: \"ජූ\", 59: \"ජ්\", 60: \"ජෝ\",\n","    61: \"ජ්‍ර\", 62: \"ජ්‍රි\", 63: \"ජ්‍රී\", 64: \"ට\", 65: \"ටා\", 66: \"ටැ\", 67: \"ටෑ\", 68: \"ටි\", 69: \"ටී\", 70: \"ටු\",\n","    71: \"ටූ\", 72: \"ට්\", 73: \"ටෝ\", 74: \"ට්‍ර\", 75: \"ට්‍ර්\", 76: \"ට්‍රි\", 77: \"ඩ\", 78: \"ඩා\", 79: \"ඩැ\", 80: \"ඩෑ\",\n","    81: \"ඩි\", 82: \"ඩී\", 83: \"ඩු\", 84: \"ඩූ\", 85: \"ඩ්\", 86: \"ඩෝ\", 87: \"ඩ්‍ර\", 88: \"ඩ්‍ර්\", 89: \"ඩ්‍රි\", 90: \"ණ\",\n","    91: \"ණා\", 92: \"ණි\", 93: \"ත\", 94: \"තා\", 95: \"ති\", 96: \"තී\", 97: \"තු\", 98: \"තූ\", 99: \"ත්\", 100: \"තෝ\",\n","    101: \"ත්‍ර\", 102: \"ත්‍රා\", 103: \"ත්‍රි\", 104: \"ත්‍රී\", 105: \"ද\", 106: \"දා\", 107: \"දැ\", 108: \"දෑ\", 109: \"දි\", 110: \"දී\",\n","    111: \"දු\", 112: \"දූ\", 113: \"ද්\", 114: \"දෝ\", 115: \"ද්‍ර\", 116: \"ද්‍රෝ\", 117: \"ද්‍රා\", 118: \"ද්‍රි\", 119: \"ද්‍රී\", 120: \"න\",\n","    121: \"නා\", 122: \"නැ\", 123: \"නෑ\", 124: \"නි\", 125: \"නී\", 126: \"නු\", 127: \"නූ\", 128: \"න්\", 129: \"නෝ\", 130: \"න්‍ර\",\n","    131: \"න්‍රා\", 132: \"න්‍රි\", 133: \"න්‍රී\", 134: \"ප\", 135: \"පා\", 136: \"පැ\", 137: \"පෑ\", 138: \"පි\", 139: \"පී\", 140: \"පු\",\n","    141: \"පූ\", 142: \"ප්\", 143: \"ප්‍රෝ\", 144: \"පෝ\", 145: \"ප්‍ර\", 146: \"ප්‍රා\", 147: \"ප්‍රි\", 148: \"ප්‍රී\", 149: \"බ\", 150: \"බා\",\n","    151: \"බැ\", 152: \"බෑ\", 153: \"බි\", 154: \"බී\", 155: \"බු\", 156: \"බූ\", 157: \"බ්\", 158: \"බ්‍රෝ\", 159: \"බ්‍ර\", 160: \"බ්‍රා\",\n","    161: \"බ්‍රි\", 162: \"බ්‍රී\", 163: \"බ්‍රෝ\", 164: \"ම\", 165: \"මා\", 166: \"මැ\", 167: \"මෑ\", 168: \"මි\", 169: \"මී\", 170: \"මු\",\n","    171: \"මූ\", 172: \"ම්\", 173: \"මෝ\", 174: \"ම්‍ර\", 175: \"ම්‍රා\", 176: \"ම්‍රි\", 177: \"ම්‍රී\", 178: \"ම්‍රෝ\", 179: \"ය\", 180: \"යා\",\n","    181: \"යැ\", 182: \"යෑ\", 183: \"යි\", 184: \"යී\", 185: \"යු\", 186: \"යූ\", 187: \"ෝ\", 188: \"ය්\", 189: \"යෝ\", 190: \"ර\",\n","    191: \"රා\", 192: \"රැ\", 193: \"රෑ\", 194: \"රු\", 195: \"රූ\", 196: \"රි\", 197: \"රී\", 198: \"ල\", 199: \"ලා\", 200: \"ලැ\",\n","    201: \"ලෑ\", 202: \"ලි\", 203: \"ලී\", 204: \"ලු\", 205: \"ලූ\", 206: \"ල්\", 207: \"ලෝ\", 208: \"ව\", 209: \"වා\", 210: \"වැ\",\n","    211: \"වෑ\", 212: \"වි\", 213: \"වී\", 214: \"වු\", 215: \"වූ\", 216: \"ව්\", 217: \"වෝ\", 218: \"ව්‍ර\", 219: \"ව්‍රා\", 220: \"ව්‍රැ\",\n","    221: \"ව්‍රෑ\", 222: \"ව්‍රෝ\", 223: \"ශ\", 224: \"ශා\", 225: \"ශැ\", 226: \"ශෑ\", 227: \"ශි\", 228: \"ශී\", 229: \"ශු\", 230: \"ශූ\",\n","    231: \"ශ්\", 232: \"ශෝ\", 233: \"ශ්‍ර\", 234: \"ශ්‍රා\", 235: \"ශ්‍රැ\", 236: \"ශ්‍රෑ\", 237: \"ශ්‍රි\", 238: \"ශ්‍රී\", 239: \"ශ්‍රෝ\", 240: \"ෂ\",\n","    241: \"ෂා\", 242: \"ෂැ\", 243: \"ෂෑ\", 244: \"ෂි\", 245: \"ෂී\", 246: \"ෂු\", 247: \"ෂූ\", 248: \"ෂ්\", 249: \"ෂෝ\", 250: \"ස\",\n","    251: \"සා\", 252: \"සැ\", 253: \"සෑ\", 254: \"සි\", 255: \"සී\", 256: \"සු\", 257: \"සූ\", 258: \"සෝ\", 259: \"ස්‍ර\", 260: \"ස්‍රා\",\n","    261: \"ස්‍රි\", 262: \"ස්‍රී\", 263: \"ස්\", 264: \"හ\", 265: \"හා\", 266: \"හැ\", 267: \"හෑ\", 268: \"හි\", 269: \"හී\", 270: \"හු\",\n","    271: \"හූ\", 272: \"හ්\", 273: \"හෝ\", 274: \"ළ\", 275: \"ළා\", 276: \"ළැ\", 277: \"ළෑ\", 278: \"ළි\", 279: \"ළී\", 280: \"ළු\",\n","    281: \"ළූ\", 282: \"ෆ\", 283: \"ෆා\", 284: \"ෆැ\", 285: \"ෆෑ\", 286: \"ෆි\", 287: \"ෆී\", 288: \"ෆු\", 289: \"ෆූ\", 290: \"ෆ්‍ර\",\n","    291: \"ෆ්‍රි\", 292: \"ෆ්‍රී\", 293: \"ෆ්‍රැ\", 294: \"ෆ්‍රෑ\", 295: \"ෆ්\", 296: \"ෆෝ\", 297: \"ක්‍රා\", 298: \"ක්‍රැ\", 299: \"ක්‍රෑ\", 300: \"ක්‍රෝ\",\n","    301: \"ග්‍රෝ\", 302: \"ඛ\", 303: \"ඛා\", 304: \"ඛි\", 305: \"ඛී\", 306: \"ඛ්\", 307: \"ඝ\", 308: \"ඝා\", 309: \"ඝැ\", 310: \"ඝෑ\",\n","    311: \"ඝි\", 312: \"ඝී\", 313: \"ඝු\", 314: \"ඝූ\", 315: \"ඝෝ\", 316: \"ඝ්\", 317: \"ඝ්‍ර\", 318: \"ඝ්‍රා\", 319: \"ඝ්‍රි\", 320: \"ඝ්‍රී\",\n","    321: \"ඳ\", 322: \"ඳා\", 323: \"ඳැ\", 324: \"ඳෑ\", 325: \"ෑ\", 326: \"ඳි\", 327: \"ඳී\", 328: \"ඳු\", 329: \"ඳූ\", 330: \"ඳෝ\",\n","    331: \"ඳ්\", 332: \"ඟ\", 333: \"ඟා\", 334: \"ඟැ\", 335: \"ඟෑ\", 336: \"ඟි\", 337: \"ඟී\", 338: \"ඟු\", 339: \"ඟූ\", 340: \"ඟෝ\",\n","    341: \"ඟ්\", 342: \"ඬ\", 343: \"ැ\", 344: \"ඬා\", 345: \"ඬැ\", 346: \"ඬෑ\", 347: \"ඬි\", 348: \"ඬී\", 349: \"ඬු\", 350: \"ඬූ\",\n","    351: \"ඬෝ\", 352: \"ඬ්\", 353: \"ඹ\", 354: \"ඹා\", 355: \"ඹැ\", 356: \"ඹෑ\", 357: \"ඹි\", 358: \"ඹී\", 359: \"ඹු\", 360: \"ඹූ\",\n","    361: \"ඹෝ\", 362: \"ඹ්\", 363: \"භ\", 364: \"භා\", 365: \"භැ\", 366: \"භෑ\", 367: \"භි\", 368: \"භී\", 369: \"භු\", 370: \"භූ\",\n","    371: \"භෝ\", 372: \"භ්\", 373: \"ධ\", 374: \"ධා\", 375: \"ධැ\", 376: \"ධෑ\", 377: \"ධි\", 378: \"ධී\", 379: \"ධු\", 380: \"ධූ\",\n","    381: \"ධෝ\", 382: \"ධ්\", 383: \"ඨ\", 384: \"ඨා\", 385: \"ඨැ\", 386: \"ඨි\", 387: \"ඨී\", 388: \"ඨු\", 389: \"ඨූ\", 390: \"ඨ්\",\n","    391: \"ඪ\", 392: \"ඪා\", 393: \"ඪි\", 394: \"ඪෝ\", 395: \"ඵ\", 396: \"ඵා\", 397: \"ඵු\", 398: \"ඵි\", 399: \"ඵෝ\", 400: \"ඵ්\",\n","    401: \"ථ\", 402: \"ථා\", 403: \"ථැ\", 404: \"ථ්\", 405: \"ා\", 406: \"ෟ\", 407: \"ණැ\", 408: \"ණෑ\", 409: \"ෘ\", 410: \"ණී\",\n","    411: \"ණු\", 412: \"ණූ\", 413: \"ණෝ\", 414: \"ණ්\", 415: \"ඥ\", 416: \"ඥා\", 417: \"ඥෝ\", 418: \"ඤ\", 419: \"ඤා\", 420: \"ඤු\",\n","    421: \"ඤෝ\", 422: \"ඤ්\", 423: \"ඣ\", 424: \"ඣා\", 425: \"ඣු\", 426: \"ඣෝ\", 427: \"ඣ්\", 428: \"ඦ\", 429: \"ඦා\", 430: \"ඦැ\",\n","    431: \"ඦෑ\", 432: \"ඦි\", 433: \"ඦු\", 434: \"ඦූ\", 435: \"ඦෝ\t\", 436: \"ඦ\", 437: \"ඡ\", 438: \"ඡා\", 439: \"ඡැ\", 440: \"ඡෑ\",\n","    441: \"ඡි\", 442: \"ඡේ\", 443: \"තැ\", 444: \"තෑ\", 445: \"ත්‍රැ\", 446: \"ත්‍රෑ\", 447: \"ත්‍රෝ\", 448: \"ළු\", 449: \"ෲ\", 450: \"\",\n","    451: \"ෛ\", 452: \"ෙ\", 453: \"‍\", 454: \"\"\n","}\n","\n","# Step 3: File Upload Method\n","def upload_and_predict():\n","    \"\"\"\n","    Upload an image using file explorer and predict the Sinhala character.\n","    \"\"\"\n","    # Upload file\n","    uploaded = files.upload()  # Opens file explorer\n","    for filename in uploaded.keys():\n","        print(f'Uploaded file: {filename}')\n","\n","        # Preprocess the uploaded image\n","        img = preprocess_image(filename)\n","\n","        # Predict the character\n","        predictions = model.predict(img)\n","        predicted_class = np.argmax(predictions)\n","        predicted_character = sinhala_unicode_mapping.get(predicted_class + 1, \"Unknown\")\n","\n","        # Output the result\n","        print(f'Predicted Character: {predicted_character}')\n","\n","# Step 4: Preprocessing\n","def preprocess_image(image_path):\n","    \"\"\"\n","    Preprocesses an image to match the model's input shape.\n","    - Loads the image in grayscale.\n","    - Resizes to 80x80.\n","    - Normalizes pixel values to [0, 1].\n","    - Expands dimensions to match model input (1, 80, 80, 1).\n","    \"\"\"\n","    img = image.load_img(image_path, color_mode='grayscale', target_size=(80, 80))\n","    img_array = image.img_to_array(img)\n","    img_array = img_array / 255.0  # Normalize to [0, 1]\n","    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension\n","    return img_array\n","\n","# Step 5: Call the upload_and_predict Function\n","upload_and_predict()\n"]}]}